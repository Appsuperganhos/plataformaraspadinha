// Aplica√ß√£o principal
class App {
    constructor() {
        this.init();
    }

    // Inicializar aplica√ß√£o
    init() {
        // Aguardar DOM carregar
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', () => {
                this.start();
            });
        } else {
            this.start();
        }
    }

    // Iniciar aplica√ß√£o
    start() {
        console.log('üöÄ Iniciando Raspou Ganhou Platform...');

        // Inicializar sistemas
        this.initSystems();
        
        // Configurar interface
        this.setupUI();
        
        // Inicializar roteador
        Router.init();
        
        console.log('‚úÖ Aplica√ß√£o iniciada com sucesso!');
    }

    // Inicializar sistemas
    initSystems() {
        // Inicializar sistema de modais
        Modals.init();
        
        // Atualizar interface de autentica√ß√£o
        Auth.updateAuthUI();
        
        // Configurar service worker (se dispon√≠vel)
        this.setupServiceWorker();
        
        // Configurar tratamento de erros
        this.setupErrorHandling();
    }

    // Configurar interface
    setupUI() {
        // Configurar tema escuro/claro baseado na prefer√™ncia do usu√°rio
        this.setupTheme();
        
        // Configurar responsividade
        this.setupResponsive();
        
        // Configurar anima√ß√µes
        this.setupAnimations();
    }

    // Configurar service worker
    setupServiceWorker() {
        if ('serviceWorker' in navigator) {
            navigator.serviceWorker.register('/sw.js')
                .then(registration => {
                    console.log('Service Worker registrado:', registration);
                })
                .catch(error => {
                    console.log('Erro ao registrar Service Worker:', error);
                });
        }
    }

    // Configurar tratamento de erros
    setupErrorHandling() {
        // Capturar erros JavaScript
        window.addEventListener('error', (event) => {
            console.error('Erro JavaScript:', event.error);
            this.handleError(event.error);
        });

        // Capturar promises rejeitadas
        window.addEventListener('unhandledrejection', (event) => {
            console.error('Promise rejeitada:', event.reason);
            this.handleError(event.reason);
        });

        // Capturar erros de rede
        window.addEventListener('offline', () => {
            Utils.showNotification('warning', 'Voc√™ est√° offline. Algumas funcionalidades podem n√£o funcionar.');
        });

        window.addEventListener('online', () => {
            Utils.showNotification('success', 'Conex√£o restaurada!');
        });
    }

    // Tratar erros
    handleError(error) {
        // Em produ√ß√£o, enviar erro para servi√ßo de monitoramento
        if (process.env.NODE_ENV === 'production') {
            // Enviar para Sentry, LogRocket, etc.
        }

        // Mostrar mensagem amig√°vel para o usu√°rio
        if (error.message && !error.message.includes('Network')) {
            Utils.showNotification('error', 'Ops! Algo deu errado. Tente novamente.');
        }
    }

    // Configurar tema
    setupTheme() {
        // Verificar prefer√™ncia salva
        const savedTheme = Utils.storage.get('theme');
        const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
        
        const theme = savedTheme || (prefersDark ? 'dark' : 'dark'); // Sempre dark por padr√£o
        document.documentElement.setAttribute('data-theme', theme);
    }

    // Configurar responsividade
    setupResponsive() {
        // Ajustar altura da viewport em dispositivos m√≥veis
        const setVH = () => {
            const vh = window.innerHeight * 0.01;
            document.documentElement.style.setProperty('--vh', `${vh}px`);
        };

        setVH();
        window.addEventListener('resize', setVH);
        window.addEventListener('orientationchange', setVH);

        // Detectar dispositivo m√≥vel
        const isMobile = Utils.isMobile();
        document.documentElement.classList.toggle('is-mobile', isMobile);
    }

    // Configurar anima√ß√µes
    setupAnimations() {
        // Intersection Observer para anima√ß√µes de entrada
        const observerOptions = {
            threshold: 0.1,
            rootMargin: '0px 0px -50px 0px'
        };

        const observer = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    entry.target.classList.add('fade-in');
                    observer.unobserve(entry.target);
                }
            });
        }, observerOptions);

        // Observar elementos com classe 'animate-on-scroll'
        document.querySelectorAll('.animate-on-scroll').forEach(el => {
            observer.observe(el);
        });

        // Reobservar quando o conte√∫do mudar
        const contentObserver = new MutationObserver(() => {
            document.querySelectorAll('.animate-on-scroll:not(.fade-in)').forEach(el => {
                observer.observe(el);
            });
        });

        contentObserver.observe(document.body, {
            childList: true,
            subtree: true
        });
    }

    // M√©todos utilit√°rios
    static getInstance() {
        if (!App.instance) {
            App.instance = new App();
        }
        return App.instance;
    }
}

// Inicializar aplica√ß√£o
const app = App.getInstance();

// Exportar para uso global
window.App = App;
window.app = app;

// Debug helpers (apenas em desenvolvimento)
if (process.env.NODE_ENV === 'development') {
    window.Auth = Auth;
    window.API = API;
    window.Utils = Utils;
    window.Router = Router;
    window.Components = Components;
    window.Modals = Modals;
    window.Admin = Admin;
    window.CONFIG = CONFIG;
}
